#!/usr/bin/env ruby

require 'rubygems'
require 'bundler'
Bundler.setup

require 'slop'
require 'docker'

PROJECT_ROOT = File.expand_path('../..', __FILE__)

opts = Slop.parse(help: true) do
  banner 'Usage: bin/run [options]'

  on '-i', 'image', '(required) the base name of the image to run [server, agent]', argument: true
  on '-k', 'key', '(optional) the path to the directory containing the gocd_rsa key, defaults to ~/.ssh/gocd', argument: :optional
end

IMAGE_BASE_NAME = 'thdevops01.mdx.med:5000'
KEY_PATH = opts[:key] || File.expand_path('~/.ssh/gocd')

def is_created?(container_name)
  Docker::Container.get(container_name)
rescue Docker::Error::NotFoundError
  nil
end

case opts[:image]
  when 'server'
    exec(<<-EOL)
      docker run -p 8153:8153 \
                 -p 8154:8154 \
                 -v #{KEY_PATH}:/keys:ro \
                 -d \
                 --name gocd-server #{IMAGE_BASE_NAME}/gocd-server
    EOL
  when 'agent'

    unless is_created?('gocd-agent-storage')
      system("docker create --name=gocd-agent-storage #{IMAGE_BASE_NAME}/gocd-agent")
    end

    # the agent is running docker inside of itself so it needs to be privileged
    host_opts = ['vagrant.mdx.med',
     'integration.vitalschoice.mdx.med',
     'admin-integration.integration.vitalschoice.mdx.med',
     'data-integration.integration.vitalschoice.mdx.med',
    ].map {|host| "--add-host='#{host}:127.0.0.1'"}.join(' ')
    exec(<<-EOL)
      docker run --privileged \
                 --link=gocd-server:gocd-server \
                 --volumes-from=gocd-agent-storage \
                 -v /lib/modules:/lib/modules:ro \
                 -v #{KEY_PATH}:/keys:ro \
                 #{host_opts} \
                 -d \
                 --name=gocd-agent #{IMAGE_BASE_NAME}/gocd-agent
    EOL
  else
    raise "unrecognized image, only server and agent allowed"
end